package com.xiaobailong.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xuehao = new Property(1, String.class, "xuehao", false, "XUEHAO");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Semester = new Property(3, long.class, "semester", false, "SEMESTER");
        public final static Property Classes = new Property(4, long.class, "classes", false, "CLASSES");
        public final static Property Results = new Property(5, Integer.class, "results", false, "RESULTS");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Ids = new Property(7, String.class, "ids", false, "IDS");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Devices = new Property(9, String.class, "devices", false, "DEVICES");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"XUEHAO\" TEXT NOT NULL ," + // 1: xuehao
                "\"USERNAME\" TEXT NOT NULL ," + // 2: username
                "\"SEMESTER\" INTEGER NOT NULL ," + // 3: semester
                "\"CLASSES\" INTEGER NOT NULL ," + // 4: classes
                "\"RESULTS\" INTEGER," + // 5: results
                "\"MOBILE\" TEXT NOT NULL ," + // 6: mobile
                "\"IDS\" TEXT NOT NULL ," + // 7: ids
                "\"SEX\" TEXT," + // 8: sex
                "\"DEVICES\" TEXT);"); // 9: devices
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getXuehao());
        stmt.bindString(3, entity.getUsername());
        stmt.bindLong(4, entity.getSemester());
        stmt.bindLong(5, entity.getClasses());
 
        Integer results = entity.getResults();
        if (results != null) {
            stmt.bindLong(6, results);
        }
        stmt.bindString(7, entity.getMobile());
        stmt.bindString(8, entity.getIds());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String devices = entity.getDevices();
        if (devices != null) {
            stmt.bindString(10, devices);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getXuehao());
        stmt.bindString(3, entity.getUsername());
        stmt.bindLong(4, entity.getSemester());
        stmt.bindLong(5, entity.getClasses());
 
        Integer results = entity.getResults();
        if (results != null) {
            stmt.bindLong(6, results);
        }
        stmt.bindString(7, entity.getMobile());
        stmt.bindString(8, entity.getIds());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String devices = entity.getDevices();
        if (devices != null) {
            stmt.bindString(10, devices);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // xuehao
            cursor.getString(offset + 2), // username
            cursor.getLong(offset + 3), // semester
            cursor.getLong(offset + 4), // classes
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // results
            cursor.getString(offset + 6), // mobile
            cursor.getString(offset + 7), // ids
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // devices
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXuehao(cursor.getString(offset + 1));
        entity.setUsername(cursor.getString(offset + 2));
        entity.setSemester(cursor.getLong(offset + 3));
        entity.setClasses(cursor.getLong(offset + 4));
        entity.setResults(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMobile(cursor.getString(offset + 6));
        entity.setIds(cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDevices(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
